#importing all of the neccesary libaries
import speech_recognition as sr
import webbrowser
#import webbrowaing
import pyttsx3
import pyjokes
import time
import keyboard
from playsound import playsound
from googlesearch import search
#import check
import datetime
import os
import cv2
import winsound
#creating the def for AI to speak
engine = pyttsx3.init()
def speak(audio):
    print(audio)
    engine.say(audio)
    engine.runAndWait()
#saying a one time thing at the start
speak("how can I help you today?")
#the main def of the code
def takeCommand():
    #recongizes your microphone
    r = sr.Recognizer()
    #using it
    with sr.Microphone() as source:
        #the AI speaks listening everytime the def is used
        speak("Listening...")
        #waits 1 second until there is silence
        r.pause_threshold = 1
        #get's the audio
        audio = r.listen(source)
        #tries to do it
    try:
        print("Recognizing...")
        #taking the audio and making it into a string and has the language set to english
        text = r.recognize_google(audio, language='en-in')
        #if error was raised because it couldn't idenify anything say he couldn't understand
    except Exception as e:
        print(e)
        print("Unable to Recognize your voice.")
    #returns the string
    return text
#the def for checking if the user said yes or no has the same build as takecommand() but without speaking and printing
def check_true():
    r = sr.Recognizer()

    with sr.Microphone() as source:
        r.pause_threshold = 1
        audio = r.listen(source)

    try:
        text = r.recognize_google(audio, language='en-in')

    except Exception as e:
        print(e)


    return text
#the main function for opening websites
def openwebsite():
    #get's the text and replaces open with nothing
    text2 = text.lower().replace("open","")
    #does a for loop for the search and texts, searches in google and returns the first website. num = the number of website it will give at once, stop = when it stops giving websites
    for j in search(text2, tld="co.in", num=1, stop=1):
        return j
#for opening your front camera
def camera():
    #calls the fuction of the camera that opens
    cam = cv2.VideoCapture(0)
    #names the camera window "ugly"
    cv2.namedWindow("ugly")

    while True:
        #reads the frames of the camera, playing the video
        ret, frame = cam.read()
        if not ret:
            #if there is a problem with the camera it will break out
            print("failed to grab frame")
            break
            #shows it to you
        cv2.imshow("ugly", frame)
        #waits for esc key to be press, when pressed it will close it
        k = cv2.waitKey(1)
        if k % 256 == 27:
            # ESC pressed
            break
     #takes a picture the moment you close named ugly
    img_name = "ugly.jpg"
    cv2.imwrite(img_name, frame)
    cam.release()
    #stops all functions of camera
    cv2.destroyAllWindows()
#same as check_true and takecommand but returns the audio instead for recording audio files
def record():
    r = sr.Recognizer()

    with sr.Microphone() as source:

        speak("recording...")
        r.pause_threshold = 1.5
        audio = r.listen(source)

    return audio
#same as check_true and takecommand but for naming files and the user
def name():
    r = sr.Recognizer()

    with sr.Microphone() as source:

        speak("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)

    try:
        text = r.recognize_google(audio, language='en-in')

    except Exception as e:
        print(e)
    return text
#for playing audio files
def play(text):
    #get's the name as text and adds ".wav" at the end to play it
    winsound.PlaySound(text + ".wav", winsound.SND_FILENAME)
    time.wait(1)
#all the games that were taking from an open source
class games:
    def snake(self):
        import turtle
        import random

        w = 500
        h = 500
        food_size = 10
        delay = 100

        offsets = {
            "up": (0, 20),
            "down": (0, -20),
            "left": (-20, 0),
            "right": (20, 0)
        }

        def reset():
            global snake, snake_dir, food_position, pen
            snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]
            snake_dir = "up"
            food_position = get_random_food_position()
            food.goto(food_position)
            move_snake()

        def move_snake():
            global snake_dir

            new_head = snake[-1].copy()
            new_head[0] = snake[-1][0] + offsets[snake_dir][0]
            new_head[1] = snake[-1][1] + offsets[snake_dir][1]

            if new_head in snake[:-1]:
                reset()
            else:
                snake.append(new_head)

                if not food_collision():
                    snake.pop(0)

                if snake[-1][0] > w / 2:
                    snake[-1][0] -= w
                elif snake[-1][0] < - w / 2:
                    snake[-1][0] += w
                elif snake[-1][1] > h / 2:
                    snake[-1][1] -= h
                elif snake[-1][1] < -h / 2:
                    snake[-1][1] += h

                pen.clearstamps()

                for segment in snake:
                    pen.goto(segment[0], segment[1])
                    pen.stamp()

                screen.update()

                turtle.ontimer(move_snake, delay)

        def food_collision():
            global food_position
            if get_distance(snake[-1], food_position) < 20:
                food_position = get_random_food_position()
                food.goto(food_position)
                return True
            return False

        def get_random_food_position():
            x = random.randint(- w / 2 + food_size, w / 2 - food_size)
            y = random.randint(- h / 2 + food_size, h / 2 - food_size)
            return (x, y)

        def get_distance(pos1, pos2):
            x1, y1 = pos1
            x2, y2 = pos2
            distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5
            return distance

        def go_up():
            global snake_dir
            if snake_dir != "down":
                snake_dir = "up"

        def go_right():
            global snake_dir
            if snake_dir != "left":
                snake_dir = "right"

        def go_down():
            global snake_dir
            if snake_dir != "up":
                snake_dir = "down"

        def go_left():
            global snake_dir
            if snake_dir != "right":
                snake_dir = "left"

        screen = turtle.Screen()
        screen.setup(w, h)
        screen.title("Snake")
        screen.bgcolor("blue")
        screen.setup(500, 500)
        screen.tracer(0)

        pen = turtle.Turtle("square")
        pen.penup()

        food = turtle.Turtle()
        food.shape("square")
        food.color("yellow")
        food.shapesize(food_size / 20)
        food.penup()

        screen.listen()
        screen.onkey(go_up, "Up")
        screen.onkey(go_right, "Right")
        screen.onkey(go_down, "Down")
        screen.onkey(go_left, "Left")

        reset()
        turtle.done()
    def tictactoe(self):
        print(20 * ' ', "   reference:    ")
        print(20 * ' ', '     |    |      ')
        print(20 * ' ', '  1  | 2  | 3    ')
        print(20 * ' ', "-----+----+----- ")
        print(20 * ' ', "     |    |      ")
        print(20 * ' ', "  4  | 5  | 6    ")
        print(20 * ' ', "-----+----+----- ")
        print(20 * ' ', "     |    |      ")
        print(20 * ' ', "  7  | 8  | 9    \n")

        def display_board():
            print()
            print('                               reference:')
            print('     |    |     ', 10 * ' ', '     |    |   ', )
            print('  ' + board[1] + '  | ' + board[2] + '  | ' + board[3] + '   ', 10 * ' ', '  1  | 2  | 3  ')
            print('-----+----+-----', 10 * ' ', "-----+----+-----")
            print('     |    |     ', 10 * ' ', "     |    |     ")
            print('  ' + board[4] + '  | ' + board[5] + '  | ' + board[6] + '   ', 10 * ' ', "  4  | 5  | 6   ")
            print('-----+----+-----', 10 * ' ', "-----+----+-----")
            print('     |    |     ', 10 * ' ', "     |    |      ")
            print('  ' + board[7] + '  | ' + board[8] + '  | ' + board[9] + '   ', 10 * ' ', "  7  | 8  | 9    \n\n")

        def human_input(mark):
            while True:
                inp = input(f"[HUMAN] '{mark}' Enter your choice:")
                if inp.isdigit() and int(inp) < 10 and int(inp) > 0:
                    inp = int(inp)
                    if board[inp] == " ":
                        return inp
                    else:
                        print(f"[HUMAN] '{mark}' place already taken.")
                else:
                    print(f"[HUMAN] '{mark}' Enter valid option (1 - 9).")

        def winning(mark, board):
            winning_place = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
            for win_place in winning_place:
                if board[win_place[0]] == board[win_place[1]] == board[win_place[2]] == mark:
                    return True

        def win_move(i, board, mark):
            temp_board = list(board)
            temp_board[i] = mark
            if winning(mark, temp_board):
                return True
            else:
                return False

        def cpu_input(cpu, human, board):
            for i in range(1, 10):
                if board[i] == ' ' and win_move(i, board, cpu):
                    return i
            for i in range(1, 10):
                if board[i] == ' ' and win_move(i, board, human):
                    return i
            for i in [5, 1, 7, 3, 2, 9, 8, 6, 4]:
                if board[i] == ' ':
                    return i

        def new_game():
            while True:
                nxt = input('[HUMAN] Do you want to play again?(y/n):')
                if nxt in ['y', 'Y']:
                    again = True
                    break
                elif nxt in ['n', 'N']:
                    again = False
                    break
                else:
                    print('Enter correct input')
            if again:
                print('__________NEW GAME__________')
                main_game()
            else:
                return False

        def win_check(human, cpu):
            winning_place = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
            for win_place in winning_place:
                if board[win_place[0]] == board[win_place[1]] == board[win_place[2]] == human:
                    print('[HUMAN] wins the match!')
                    if not new_game():
                        return False
                elif board[win_place[0]] == board[win_place[1]] == board[win_place[2]] == cpu:
                    print('[CPU] wins the match!')
                    if not new_game():
                        return False
            if ' ' not in board:
                print('MATCH DRAW!!')
                if not new_game():
                    return False
            return True

        def user_choice():
            while True:
                inp = input('[HUMAN]Choose your mark[x/o]: ')
                if inp in ['x', 'X']:
                    print('[HUMAN]You choose "X".\n[HUMAN]You play first.')
                    return 'x', 'o'
                elif inp in ['O', 'o']:
                    print('[HUMAN] You choose "O".\n[HUMAN] CPU plays first.')
                    return 'o', 'x'
                else:
                    print('[HUMAN] Enter correct input!')

        def main_game():
            global board
            play = True
            board = ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
            human, cpu = user_choice()
            display_board()
            while play:
                if human == 'x':
                    x = human_input(human)
                    board[x] = human
                    display_board()
                    play = win_check(human, cpu)
                    if play:
                        o = cpu_input(cpu, human, board)
                        print(f'[CPU] Entered:{o}')
                        board[o] = cpu
                        display_board()
                        play = win_check(human, cpu)
                else:
                    x = cpu_input(cpu, human, board)
                    print(f'[CPU] Entered:{x}')
                    board[x] = cpu
                    display_board()
                    play = win_check(human, cpu)
                    if play:
                        o = human_input(human)
                        board[o] = human
                        display_board()
                        play = win_check(human, cpu)

        if __name__ == '__main__':
            main_game()
    def pong(self):
        import turtle

        wn = turtle.Screen()
        wn.title("Pong")
        wn.bgcolor("black")
        wn.setup(width=800, height=600)
        wn.tracer

        # paddle A
        paddle_a = turtle.Turtle()
        paddle_a.speed(0)
        paddle_a.shape("square")
        paddle_a.color("white")
        paddle_a.shapesize(stretch_wid=5, stretch_len=1)
        paddle_a.penup()
        paddle_a.goto(-350, 0)

        # bot paddle
        paddle_b = turtle.Turtle()
        paddle_b.speed(0)
        paddle_b.shape("square")
        paddle_b.color("white")
        paddle_b.shapesize(stretch_wid=5, stretch_len=1)
        paddle_b.penup()
        paddle_b.goto(350, 0)

        # ball
        ball = turtle.Turtle()
        ball.speed(0)
        ball.shape("circle")
        ball.color("white")
        ball.penup()
        ball.goto(0, 0)
        ball.dx = 8
        ball.dy = 8

        # paddle movement
        def paddle_a_up():
            y = paddle_a.ycor()
            y += 20
            paddle_a.sety(y)

        def paddle_a_down():
            y = paddle_a.ycor()
            y += -20
            paddle_a.sety(y)

        # keyboard binding
        wn.listen()
        wn.onkeypress(paddle_a_up,"w")
        wn.onkeypress(paddle_a_down,"s")

        # score
        score_a = 0
        score_b = 0

        # scoring
        pen = turtle.Turtle()
        pen.speed(0)
        pen.color("white")
        pen.penup()
        pen.hideturtle()
        pen.goto(0, 260)
        pen.write("Human : 0   Bot : 0", align="center",
                  font=("courier", 24, "normal"))

        # bot
        def bot():
            if ball.xcor() > 0 and ball.dx == 8:
                paddle_b.goto(350, ball.ycor())
            else:
                pass





        while True:
            wn.update()

            # move the ball
            ball.setx(ball.xcor() + ball.dx)

            ball.sety(ball.ycor() + ball.dy)

            bot()

            # border
            if ball.ycor() > 290:
                ball.sety(290)
                ball.dy *= -1

            if ball.ycor() < -290:
                ball.sety(-290)
                ball.dy *= -1

            if ball.xcor() > 390:
                ball.goto(0, 0)
                ball.dx *= -1
                score_a += 1
                pen.clear()
                pen.write(f"Human : {score_a}   Bot : {score_b} ",
                          align="center", font=("courier", 24, "normal"))

            if ball.xcor() < -390:
                ball.goto(0, 0)
                ball.dy *= -1
                score_b += 1
                pen.clear()
                pen.write(f"Human : {score_a}   Bot : {score_b} ",
                          align="center", font=("courier", 24, "normal"))

            # paddle and ball collision
            if (ball.xcor() > 340) and (ball.xcor() < 350) and (
                    ball.ycor() < paddle_b.ycor() + 50 and ball.ycor() + 40 > paddle_b.ycor() - 40):
                ball.setx(340)
                ball.dx *= -1

            if (ball.xcor() < -340) and (ball.xcor() > -350) and (
                    ball.ycor() < paddle_a.ycor() + 50 and ball.ycor() + 40 > paddle_a.ycor() - 40):
                ball.setx(-340)
                ball.dx *= -1

            # Maximum score is 15 but you can increase it here
            if score_a >= 15:
                break
            elif score_b >= 15:
                break
            else:
                continue
        turtle.done


#for easier use of the games
game = games()
#always running
while True:
    #does every thing in try and if it raises and error it will just say he doesn't understand
    try:
        #calls text as the main listening command
        text = takeCommand().lower()
        #if you want to add you can make it so only when a certain name is called it will listen to you
        if "" in text.lower():
            #prints the text for the user to see what the program understood
            print(text)
            #if open is found start this
            if "open" in text.lower():
                #if specificly open google is said he will open google, because with the other command it will just open an image of google
                if "open google" == text.lower():
                    webbrowser.open("www.google.com")
                    speak ("opening google")
                #if not open google do this
                else:
                    #get's the text for the website
                    website = openwebsite()
                    #opens the website
                    webbrowser.open(website)
                    #says he is opening that
                    speak("opening"+ text.replace("open",""))
            #a joke command will just play a funny audio file
            elif "send nudes" in text.lower():
                playsound('audio.mp3')
            #another joke commmand will open the front camera using camera()
            elif "why am i single" in text.lower() or "am i ugly" in text.lower():
                try:
                    speak ("to close press escape")
                    camera()
                #if there isn't a camera it will raise an error and say you don't have one
                except:
                    speak ("no camera found")
            #searching anything on google currently not in use for upgrading it
            elif "search" in text.lower():
                text2 = text.lower().replace("search", "").replace("luigi", "")
                #webbrowaing.search(text2)
                speak("searching" + text2)
            #get's a joke from python it self, most jokes are nerdy jokes
            elif "joke" in text.lower():
                #the language is english and it gives all jokes
                My_joke = pyjokes.get_joke(language="en", category="all")
                #speaks the joke
                speak(My_joke)
             #if you want the program to stop listening it will
            elif "pause" in text.lower():
                speak ("pausing...")
                #enters an always running while for it not to hear the user
                while True:
                    try:
                        #checks if you said "continue" if yes he will start the program again
                        check = check_true().lower()
                        if check.lower() == "continue":
                            speak ("continuing...")
                            break
                    except:
                        pass
            #opens your txt file of notes and starts writing
            elif "write a note" in text:
                file = open("note.txt", "a")
                while True:
                    try:
                        #the note get's name and listening for what the user said
                        speak("What should I write?")
                        note = name()
                        speak("Should I include date and time?")
                        #asks if you want to add date and time to the note
                        print ("yes                      no")
                        break
                    except:
                        pass
                try:
                    #checks if check is yes or no if it isn't it will return to the start of the while true
                    check = check_true().lower()
                    while True:
                        if check == "yes":
                            #get's the datetime through the libary of date time
                            e = datetime.datetime.now()
                            #makes the date as day, month, year (you can also add minutes,hours and seconds)
                            date = e.strftime((e.strftime("%d/%m/%Y")))
                            #writes the date
                            file.write(date)
                            #adds a :- for better visual exprience
                            file.write(" :- ")
                            #writes the actual note and goes down a line
                            file.write(note + '\n')
                            speak ("ok the note has been added")
                            #breaks into the main while true loop
                            break
                            #if note it will just write the note
                        elif check == "no":
                            file.write(note + '\n')
                            speak ("ok the note has been added")
                            break
                        else:
                            speak ("please choose one")
                except:
                    speak ("sorry I couldn't understand")
                #closes note
                file.close()
                #reads the note
            elif "read my note" in text.lower() or "what is my note" in text.lower():
                #opens the note
                file = open("note.txt")
                #starts reading it
                speak (file.read())
                #closes note
                file.close()
            elif "write" in text.lower():
                #writes what ever the user said
                text2 = text.lower().replace("write", "")
                keyboard.write(text2)
            #stops the program complete
            elif "stop" == text:
                speak("stopping...")
                break
            #delete your notes
            elif "delete" in text.lower():
                #opens the note with r+ meaning overwrite
                file = open("note.txt", "r+")
                #ask you to confirm to delete them
                speak ("are you sure you want to delete your notes?")
                print ("yes                        no")
                while True:
                    try:
                        check = check_true().lower()
                        if check == "yes":
                            #if yes it sets the notes to 0 value meaning nothing
                            speak ("okay deleting your notes")
                            file.truncate(0)
                            break
                        elif check == "no":
                            #if no it will just break out of the loop
                            break
                        else:
                            #will return to the start of the while true
                            speak ("please choose one")
                    except:
                        speak ("sorry couldn't understand")
            #starts the recording
            elif "record" in text.lower():
                    #listens to you until it hears 1 second of silence
                    recording = record()
                    while True:
                        try:
                            #asks the name of the file to be
                            speak("what name will you give it?")
                            name_file = name()
                            #wants to confirm if you want to name it as
                            speak("are you sure you want to save it as '" + name_file + "'")
                            print ("Yes                          No")
                            check = check_true().lower()
                            if check.lower() == "yes":
                                #of yes opens/create a file as wav and writes the recording in it, if already there is a wav file called that it will overwrite it
                                with open(name_file + ".wav", "wb") as file:
                                    file.write(recording.get_wav_data())
                                speak("saving...")
                                break
                            elif check.lower() == "no":
                                #returns to the name selection
                                pass
                            else:
                                speak ("please choose one, yes or no")
                        except:
                            speak ("sorry I couldn't understand")
                    #closes the audio file
                    file.close()
            elif "game" in text.lower():
                #asks the user which game it wants to play
                speak("which game should we play?")
                print ("tic tac toe       snake       ball(pong)")
                while True:
                    try:
                        #checks the game and says how to play them
                        check = check_true().lower()
                        if check == "snake":
                            speak ("the keys are the arrow keys")
                            game.snake()
                            break
                        elif "tic-tac-toe" in check:
                            game.tictactoe()
                            break
                        elif check == "ball":
                            speak ("the keys are w and s")
                            game.pong()
                            break
                        elif check == "stop":
                            break
                        else:
                          speak("please choose one")
                    except:
                        speak ("sorry I don't understand")
                        break
            #for playing the audio files you recorded
            elif "play" in text.lower():
                speak ("which file should I play?")
                try:
                    #get's the name of the file and plays it
                    name_file = name()
                    play(name_file)
                except:
                    #if the files does not exist it will raise an error and go to the except and it will say it
                    speak("sorry the file '" + name_file + "' does not exist")
            elif "change my name" in text.lower():
                #will change your name to your choosing
                file = open("name.txt", "r+")
                speak("ok what should I change it to?")
                while True:
                    try:
                        #asks to what to change and gets it
                        username = name()
                        speak ("are you sure you want to change it to " + username)
                        print ("yes                      no")
                        #asks you to confirm
                        check = check_true().lower()
                        if check == "yes":
                            #if it is yes it will delete the name and write it for what you said
                            file.truncate(0)
                            file.write(username)
                            break
                        elif check == "no":
                            #if no it will return to the while true
                            speak ("ok what should I change it to then?")
                        else:
                            speak ("please choose one yes or no")
                    except:
                        speak ("sorry I don't understand")
                #says your name
                speak ("ok your name is now " + username)
                #closes file
                file.close()
            elif "my name" in text.lower():
                #opens the name and reads the name
                file = open("name.txt")
                username = file.read()
                if username == "":
                    #if user did not have a previous name it will say it
                    speak ("you don't have a name. what should I call you?")
                    while True:
                        try:
                            #asks to what to call you and gets it
                            username = name()
                            speak("are you sure you want me to name you " + username)
                            print ("yes                       no")
                            check = check_true().lower()
                            #confirms if you want to name your self as that
                            if "yes" == check:
                                #if yes it opens name text and starts to write
                                file = open("name.txt", "w")
                                file.write(username)
                                speak ("okay your name is now " + username)
                                break
                            elif "no" == check:
                                #returns to the while true start
                                speak ("okay what is your name then?")
                            else:
                                speak ("please choose yes or no")
                        except:
                            pass
                else:
                    #if the user already has a name it will say it
                    speak("your name is " + username)
                #closes file
                file.close()
            elif 'the time' in text.lower():
                #get's the time
                e = datetime.datetime.now()
                #speaks the time as hour, minute and seconds
                speak("the time is "+ (e.strftime("%H:%M:%S")))
            elif "what day is it" in text.lower() or "what day is today" in text.lower():
                #get's the time and speaks it as the day(sunday,monday ect.), month, day (08 or 12 ect) and year
                e = datetime.datetime.now()
                speak ("today is " + (e.strftime("%a, %b %d, %Y")))
            else:
                #if no one of the command is used it will say he doesn't understand
                speak ("sorry I don't understand")
    except UnboundLocalError:
    #if the error is specificly not getting any text it will just return the the start of while true
        pass